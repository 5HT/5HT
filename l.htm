<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>L</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">articles</a>
</div>
<hr>
<div class=app>

<div align=right>FROM: 5HT<br>
                   TO: MAXIM KHARCHENKO<br>
                 DATE: 5 MAR 2015</div>

<h2>Language L: Type Inspector</h2>

<div class=message>

<p>The L is an emerging modern functional language
LLVM compiler for Xen applications by <b>cloudozer</b>.
This document is dedicated to a proposition of a concise and
holistic syntax for type inspector, the front end of
type inferrer, visible to user in future L repl.</p>


<h3>Overview</h3>

<p>The basic feature of L and its type system is that it is able
to infer the infinite non-terminated structures from codata as it
could be found in <b>F<sub><:</sub></b> type system.</p>

<h4>Recursive Types</h4>

<div class=note style="background-color:#FAFAFA;"><p>Code Sample:<br>
<code>
&nbsp;rev [] xs -> xs;
&nbsp;rev [x|xs] ys -> rev xs [x|ys].
</code><p></div>
<div class=note><p>Infered recursive infinite
list as the second argument in rev/2 codata:</b>
<pre>
    :: rev = fun: x y -> y
               y: z -> {z,y•z}
               x: z -> (nil | {z,x•z})
</pre>
</p></div>

<h4>Subtypes</h4>

<h4>Intersection Types</h4>

<!--p><font color=#D0021B>
Попытаемся универсализировать синтаксис отладчика типов.
Пускай отладчик на каждое имя: Функции, Типа данных или
Модуля выводит сразу имя головного уравнения, и уравнения
типовых переменных которые упоминаются в сигнатуре
(главном входящем уравнении). Так например для любой
переменной мы сможем автоматически назвать головоное
уравнение именем типа: fun (уравнения функций, <b>codata</b>),
type (уравнения типов данных, <b>data</b>), module (уравнения модулей,
как список любых типов, функций, данных, <b>cat</b>).
Я заметил что сейчас lc -t не детализируют перменную z,
поэтому я ее тут привел явно, чтобы все соотвествовало
формулам в статье newer_types.</font>
</p-->

<!--div class=note><p>NOTE: As you may see L is pretty good in infering infinite lists.</p></div-->

<h3>Type Inspector Syntax</h3>

<p>The syntax of the type solver is the part of L that is able to solve a given
equations with respect to order of subtyping (marked by <b>"<"</b> symbol) and
named recursive types (marked as <b>":"</b> symbol).</p>

<div class=note><p> <pre>
         Equation = :: Term = [ Form ]
             Form = Nomen | Subtype
          Subtype = Type  < Type .
            Nomen = Atom  : Type .
             Type = App  -> Arrow
              App = App   * Data
              App = Data
             Data = Const | Var | Cell
                  | Product
                  | Sum
                  | Nomen
                  | ( Type )
</pre></p></div>

<br>

<div class=note><p>Sample Equation<pre>
:: r02.t = F: x1 -> G * x1 * int.
           G: int -> int -> int.
           H: ( nil -> x2 -> x2 | [x3|y3] ->
              z3 -> H * y3 * z3 ).
           I: ( nil -> x4 -> x4 | [x5|y5] ->
              z5 -> G * y5 * (I * x5 * z5) ).
           G < H.
           I < F.
           F < (nil | G).
</pre></p></div>

<h3>Type System</h3>

<p>Some types are embedded in L core to resolve main tasks during
type inference, type unification and patterm maching compilation.
L has following basic types which are used by infer/unify/match core.
Altogether all these types are needed in core to operate and compile AST of Type Inspector:</p>

<div class=note style="background-color:#fafafa;"><p>Types of programs<ul>
    <li>Product <code>{,}</code></li>
    <li>Sum <code>(|)</code></li>
    <li>Fun <code>-></code> codata</li>
    <li>Type <code></code> data</li>
    <li>Module <code></code> cat</li>
    </ul></p></div>
<div class=note><p>Types in equations<ul><li>Arrow <code>-></code> </li>
    <li>Application <code>•</code> </li>
    <li>Subtyping <code><</code></li>
    <li>Nomen <code>:</code></li>
    <li>Equation<code>=</code></li>
</ul></p></div>

<p>During type inference we also operate such type instances as
Constants, Variables, Constructors and Wildcards.</p>

<h4>Constants</h4>

<div class=note>
<pre>
    int 42 
    long 137L 
    float 3.14f 
    double 2.0 
    atom :ok 
    bool true 
    nil []
</pre>
</p></div>


<h4>Constructors</h4>

<p>Constructors are named type equations which defines a function of
construction a new parametric type by using basic core type primitives.
Recursion and mutual recursion is allowed in type constrcutors and successfuly infered.</p>

<div class=note>
<pre>
:: intList      = type:        (nil | {int,type})
:: list         = type: x ->   (nil | {x,type•x})
:: pairsList    = type: x y -> (nil | {{x,y},type • x y})
:: binTree      = type: x ->   (nil | {type•x,x,type•x})
:: listsList    = type: f
                     f: x ->   (nil | {g•x,f•x})
                     g: x ->   (nil | {x,g•x})

:: variadicTree = type: f
                     f: x ->   (nil | {x,g•x})
                     g: x ->   (nil | {f•x,g•x})

:: lists      = module: rev
                   rev: l y -> y
                     l: x ->   (nil | {x,l•x})
                     y: z ->          {z,y•z}

</pre>
</p></div>

<!--font color=#D0021B>
<p>
Так например здесь приведены уравнения для простых типов
данных и слишком рекурсивных которые в одно уравнение не
помещаются. Приведен пример синтаксиса для гипотетического
модуля, просто как контейнера для других типов, но который
по сути просто набор уравнений.</p>

<p>В уравнениях я так понимаю, что
типы данных отличаются от типов функций тем, что Application
не встречается в уравнениях функций, а только в уравнения типов.
Но если Application нет в типе данных, то такая сигнатура
может быть неотличимы от сигнатуры функции. Только если
отдельно спросить у отладчика типов тип этой переменной, то
можно будет по имени корневого уравнения узнать тип этой
типовой переменной.</p></font-->



</div>
</div>
</body>
</html>
