<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>FTP</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">articles</a>
</div>
<hr>
<div class=app>

<div align=right>FROM: 5HT<br>
                   TO: #N2O<br>
                 DATE: 23 SEP 2015</div>

<h2>N2O Binary File Transfer Protocol</h2>
<h4>TL;DR — Sick and tired of XML, jQuery, Base64, XHR, MIME, miltipart?<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Here is clean and simple WebSocket file transfer!</h4>

<div class=message>

<h3>Background</h3>

<p>When we started to craft N2O framework we strive to provide latest technologies on the market.
Late in 2011 WebSocket protocol was not yet supported on all browsers and we spawned N2O
on pure WebSocket stack blindly without knowing the future. Now we are sure it was right decision.
We were sick and tired of XML, Base64, jQuery and XHR polling request known as comet. By numerous requests
XHR is supported in N2O started from 2.4 but we engage everyone to decline this power-consuming technology.</p>

<h3>Microservices vs Ad-hoc protocols</h3>

<p>Once we got a project that involved Blu-ray disc file uploading through web browser.
N2O was fit this case thanks to binary nature of WebSocket channel. We were peeoneers who implemented
simple and clean binary file upload, without all this multipart HTTP bullshit. We really engage anybody
to deny both HTTP/1 and HTTP/2 profiles and use pure WebSocket channel. It is much easier, code is clean,
no headers, no states, no codes, no bullshit. You can build your own ad-hoc protocol easily without trying to fit your
API language to resource-based REST endpoints architecture. Yes, we really think that all this microservices buzz
are exectly just like design patterns: it solves nothing.</p>

<p>Of course there still some cases REST is useful like existing systems integration;
still WebSocket set of utilities lacks some usefull things like curl and wrk;
but WebSockets is young technlology and tools like <b>tcpkali</b> arises and more to come.</p>

<p>Binary File Transfer Protocol is simple example of task that is hard to fit REST HTTP/2 approach.
This is exactly where WebSocket protocol shines. FTP and BIN protocols were presented from the begining of formalizing
<a href="http://5ht.co/n2o.htm">N2O</a> protocol stack and this document will guide you N2O FTP implementation. This implementation was made
by the original N2O co-author Andrii Zadorozhnii and was designed to be limited by 100 LOC for both
JavaScript and Erlang.<p>

<h3>Erlang Supervision</h3>

<p>Usually we encourage to build stateless N2O applications. This allows you easy scaling but sometimes
you to really need access to global state, especialy in web frameworks: sessions, cache and other global
resources like processes. Starting from N2O version 2.9 provides powerful <b>n2o_async</b> gen_server processunder supervision.
Currently N2O supports several clasess of async processes: <b>file</b> for file upload workers;
<b>async</b> for web pages workers; and other custom clasess for you needs. The cool thing is that <b>n2o_async</b>
hides verbose OTP <b>gen_server</b> templates and provides clean <b>proc/2</b> callback API for any Erlang module.
The other cool thing is that n2o_async supports gen_server's <b>call</b>, <b>cast</b> and <b>info</b> functions.</p>

<p><center>Listing 1. <b>n2o_async</b> supervision</center><br>
<div class=note><pre>

    > pid(0,507,0) ! "hey".
      Received: "hey"
      ok

    > n2o_async:send("ho!","hola").
      Received: "hola"
      ok

    > gen_server:call(pid(0,507,0),"sync").
      Received: "sync"
      ok

    > supervisor:which_children(n2o).
      [{{async,
          {"counter",<<"d43adcc79dd64393a1eb559227a2d3fd">>}},
        <0.11564.0>,worker,
        [n2o_async]}]
</p></pre></div></p>

<p>The only mandatory state value you need to hold during file uploading is a file offset that increments after each chunck.
However user may want to put some additional metainformation from FTP packet during upload. For that purposes N2O implements
File Transfer Protocol as supevised n2o_async backed by gen_server. By implementing N2O <b>info/3</b> protocol API the FTP
initialization is clean and portable:</p>

<p><center>Listing 2. <b>n2o_async</b> initialization</center><br>
<div class=note><pre>

info( #ftp { sid=Sid, filename=Filename, hash=Hash,
            status= <<"init">>, offset=Size, block=B,
            data=Msg } = FTP, Req, State) ->

    application:set_env(n2o,formatter,bert),

    Dir   = lists:concat([?ROOT,'/',wf:to_list(Sid),'/']),
            filelib:ensure_dir(Dir),
    File  = filename:join([Dir,Filename]),
    FSize = case file:read_file_info(File) of
                 {ok,   Fi} -> Fi#file_info.size;
                 {error, _} -> 0 end,

    Name   = { Sid, Filename, Hash },
    Block  = case B of 0 -> ?stop; _ -> ?next end,
    Offset = case FSize >= Size of true -> FSize; false -> 0 end,
    F2     = FTP#ftp{block = Block, offset = Offset, data = <<>> },

    n2o_async:stop(file,Name),
    n2o_async:start(#handler { module=?MODULE, class=file,
                               group=n2o, state=F2, name=Name }),

    {reply,wf:format(F2),Req,State};

</pre></div></p></p>

<p>The async process needs only shifting state's offset and pushing it back to client</p>

<p><center>Listing 3. Uploader <b>n2o_async</b> process</center><pre>

    proc( #ftp{ sid=Sid, data=Msg, block=Block, filename=F} = FTP,
          #handler{ state=#ftp{data=State, offset=Offset}} = Async) ->

    F2 = FTP#ftp{status= "send", offset=Offset + Block },
    wf:info(?MODULE,"send ~p", [F2#ftp{data= <<"">>}]),

    case file:write_file(?FILE(Sid,F),&lt;&lt;Msg/binary&gt;&gt;,[append,raw]) of

            ok -> {reply, F2#ftp{data= <<"">>}, Async#handler{state=F2}};
    {error,Rw} -> {reply, {error, Rw}, Async} end.

</p></pre></p>

<h3>JavaScript Client </h3>

<p>The main idea was to create unified client for node.js and web browser.
   As you may want to use <b>dropzone.js</b> or other file uploader front ends.
   At the heart of <b>ftp.js</b> is a <b>bert.js</b> packaging as FTP is working
   only with BERT formatter. We deny using XHR or other transports for file uploading.
   However by abstracting <b>enc</b> client formatting function we are saving the ability to
   use any underlying transpots.</p>

<p><center>Listing 4. <b>ftp.js</b> client module</center><br>
<div class=note><pre>

var ftp = {

    $file:   undefined,
    $reader: undefined,
    $block:  undefined,
    $offset: undefined,

    init: function(file, force) {
              ftp.$file = file; ftp.send('', 'init', 1); },

    start: function() {
              ftp.$active = true;
              ftp.send_slice(ftp.$offset, ftp.$offset + ftp.$block); },

    stop: function() { ftp.$active = false; },

    send: function(data, status, force) {
        ws.send(enc(tuple(atom('ftp'),number(1),bin(ftp.$file.name),
                number(3),number(4),number(5),number(6),
                number(7),bin(data),bin(status||'send'),
                number(force || data.byteLength),number(11)))); },

    send_slice: function(start, end) {
        this.$reader = new FileReader();
        this.$reader.onloadend=function(e) {
             var res=e.target, data=e.target.result;
             if (res.readyState == FileReader.DONE && data.byteLength > 0)
                 ftp.send(data); };
        this.$reader.readAsArrayBuffer(ftp.$file.slice(start,end)); } }

</pre></div></p>

<br>
<p><center>Listing 5. <b>n2o_file</b> protocol handler</center><br>
<div class=note><pre>

$file.do = function(rsp) {
    var offset = rsp.v[6].v, block = rsp.v[10].v, status = rsp.v[9].v;
    switch (status) {
        case 'init': ftp.$offset = offset; ftp.$block = block; break;
        case 'send': var x = qi('ftp_status'); if(x) x.innerHTML = offset;
                     if (block>0 && ftp.$active)
                         ftp.send_slice(offset, offset+block); } }

</pre></div></p>

<h3>N2O Element</h3>

<p>The NITRO element will consist of three buttons:
one select the file, other two start and stop uploading process. It should use
only <b>ftp.js</b> API that can plugged to any upload front-end such as <b>dropzone.js</b>.</p>

<p><center>Listing 6. <b>#upload</b> element</center>
        <pre>

  render_element(#upload{id=Id} = U) ->
      Uid = case Id of undefined -> wf:temp_id(); I -> I end,
      bind(ftp_open,  click,  "qi('upload').click(); e.preventDefault();"),
      bind(ftp_start, click,  "ftp.start();"),
      bind(ftp_stop,  click,  "ftp.stop();"),
      bind(nitro:to_atom(Uid), change, "ftp.init(this.files[0],1);"),
      Upload = #panel  { body = [
               #input  { id   = Uid,         type    = <<"file">> },
               #span   { id   = ftp_status,  body    = [] },
               #span   { body = [
               #button { id   = ftp_open,    body = "Browse" },
               #button { id   = ftp_start,   body = "Upload" },
               #button { id   = ftp_stop,    body = "Stop" }
      ] } ] }, wf:render(Upload).

  bind(Control,Event,Code) ->
      wf:wire(#bind{target=Control,type=Event,postback=Code}).

</pre>
</p>

<h3>Showcase</h3>

<p>One picture more than thousand words:</p>

<p><center><iframe width="600" height="400"
           src="http://www.youtube.com/embed/6894J2If78c?wmode=opaque" frameborder="0"
           allowfullscreen="allowfullscreen" data-link="http://www.youtube.com/watch?v=6894J2If78c"></iframe>
</center></p>

<div align=right style="padding-top:33px;"><p>Made with ♡  for N2O</p></div>

</div>
</div>
</body>
</html>
