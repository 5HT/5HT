<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
  </head>
    <title>Exe Language</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">articles</a>
</div>
<hr>
<div class=app>

<div align=right>FROM: 5HT<br>
                   TO: PRIVATE<br>
                 DATE: 1 OCT 2015</div>

<h2>Exe Language</h2>
<h4>TL;DR — certified executional environment of sequentional evaluations
            in process calculus on raw hardware.</h4>

<h3>Abstract</h3>

<p>Developing theory, model and implementation of minimalistic certified
   executive environment for a full application stack of components:
   hardware abstraction, language, virtual machine, message queue,
   database, HTTP and websocket servers, web application framework etc that is normalized
   for mass data usage, correct by construction and is usable today. Starting
   from underlying formalisms such as process and lambda calculus, temporal logic, type theory
    through virtual machine abstraction to
   the raw hardware, real world applications and protocol stacks ending up with
   samples, frameworks and documentation.</p>

<p><b>Keywords</b>:

    Unikernel, Full-stack, Specification, Formal Methods,
    Certification, Event Streaming, Time Series,
    Protocol Analysis, Statistics.</p>

<h2>The Idea and its space</h2>

<p>Exe Language is an attempt to formally specify and validate the inter-component
   communications using such tools TLA+ — a model checker for distributed systems.
   But Exe is not limited to temporal logic, it also provides type theoretical
   notation, graphical language based on Petri Nets, inner semantics of pi-calculus.
   Here is the list of theories Exe Language can be expressed in:</p>

   <ul><li>type theory</li>
       <li>temporal logic</li>
       <li>linear algebra</li>
       <li>mass service</li>
       <li>process calculus</li>
       <li>messaging language</li></ul>

<p>and other types of foundations for easier and more effective</p>

   <ul><li>statistical analisys of event streams</li>
       <li>performance measurement of mass service</li>
       <li>correctness and soundness of execution system</li>
       <li>application lifecycle of packages</li> </ul>

<p>targeting</p>

   <ul><li>all OSI levels</li></ul>

<h2>Linearizability</h2>

<p>Linearizability is a key feature in one to many relation, storing the sequences,
   iterators and execution logs. Vector of two elements can encode binary trees
   and confluent case — lists.</p>


<p>The main trick is the lists is best to encode the sequence of execution,
   data parameters, code itself, and are easy to store in KV stores.
   The linear nature of executions helps in such protocols as XA, Chain
   Replication and RETE matching.
   The lists are also a foundation to virtual machine's messaging queues
   and other core data structures.</p>

<center><p>Iterator over Chain</p><p>
<img src="img/exe-feed.svg" width=400>
</center></p>

<h2>Behavior of Time Series</h2>

<p>According to TLA+ behaviors is the chronological sequence of states.
   This is the basic representation of process protocols, iterators and
   other chain based data. For statistical software like R or Julia you
   also need to provide your data as a time series of some state. Seems like
   treating any data as arrays of records is the best way to handle it.
   The fact that the event stream has a constant record in its base
   us to the domain of monoidal actions.</p>

   <p>The other goodie about recorded event stream is that system
      can be replayed starting from initial system state similar to how it's happens
      in log-based replicated databases.
      This opening the space to distributed consistent transactions streams
      such as CR&nbsp;and&nbsp;TPS.</p>

<center><p>Recorded Event Stream</p><p>
<img src="img/exe-ev.svg" width=400>
</center></p>

<code>
                               Λ : ⊗ Ι Λ Μ Ο Σ
                                 | Ξ

</code>

<p>The iteration of system or protocol messages is taken as recorded
   behavior of the system. The iteration of data messages is taken as
   persistent feeds. The system itself consist of different protocol
   bands which are tuples definitions. These protocol bands called
   applications and the overall system state is just zip of protocol
   bands which are given in application band signature list.</p>




<h2>Algebraїc Approach</h2>

<p>By using algebraic language we could describe linearized process with semgroup
actions, which was previsous successfully used for modeling FSM automatas.</p>

<code>
    Α : Σ · Φ → Φ         action protocol state ->  state
    Φ : ⊗ Λ Σ                             state = { history,  protocol }
    Λ : ⊗ Σ Φ Λ                         history = { protocol, state,   history }
      | Ξ                                       | []
    Σ : ⊗ message _                    protocol = { message, _ }
      | ⊗ event   _                             | { event,   _ }
      | ⊗ call    _                             | { call,    _ }
      | Ξ                                       | []
</code>

<h3>Inversable Actions</h3>

<p>Having reversavle function will allow us to reconstruct
the state of the process, which is usually much bigger than a messages,
on only by direct function but also by inverse function. Natural support
for inversable actions provided by doubly-linked lists which also has a
signature equals to binary trees.</p>

<center><p>
                  s<sub>t</sub>(p) = p(s<sub>t-1</sub>) — applying state to protocol function<br><br>
               p<sup>-1</sup>(s<sub>t</sub>) = s<sub>t-1</sub> — reverse step
</p></center>

<code>
                               Φ : ⊗<sup>i</sup></sub>
                               Λ : ⊗ Ι Λ<sub>prev</sub> Λ<sub>next</sub> Φ
                                 | Ξ

</code>



<h2>Lightweight Unikernel Environments</h2>

<p>During the years various computer systems designs were changed and not
   all good theories were met with good implementations. From the ancient
   full-stack Lisp&nbsp;Machines, Smalltalk virtual machine which was able
   to transfer their state on different platform, and modern executional
   platforms like managed object-oriented CLR, functional
   Haskell and Erlang. At the base however you still observe UNIX or Windows&nbsp;NT
   based executional environments which is far from being verifiable and correct
   moreover they consume more power because of layering the abstractions.
   Languages like Erlang, Haskell and OCaml are most
   suited for the further eveloving of correctness and provability. They provide
   LING, HaLVM and Mirage lightweight unikernels respectively.</p>

<p>If you ask me to find other words to describe this work I would say
   that this work is an attempt to build close to theoretical adequate and precise
   executional environment that is easy to be verified and managed,
   encoded in most effective way, optimized by defition and construction,
   that relies close to hardware and provides top level modern
   software language access in Erlang.</p>


<h2>Constructing the Specfication Language</h2>

<h3>Characteristics</h3>

<blockquote>
<p>
    • Ease of expressing constructs arising in problems.<br>
    • Suggestivity.<br>
    • Ability to subordinate detail.<br>
    • Economy.<br>
    • Amenability to formal proofs.<br>
    • Isomorphic Visual and Algebraic languages.<br>
</p>
</blockquote>

<h3>Exe Legend and Petri Process sample</h3>

<p>We will extent Petri nets graphical language alphabet with several letters up to seven.
   This language preserve message-passing semanthics along with core primitives
   such as <b>client</b> or <b>server</b> process, <b>feed</b> chains or indexed <b>tables</b> (B+,B*).
   We will use this language also to define the signatures of top-level applications.
   </p>

<center>
<img style="align:float;" src="img/exe-legend.svg" height=300><img style="margin-left:200px;align:float;"src="img/exe-proc.svg" height=300>
</center>

<h3>Virtual Machine</h3>

<p>
<b>action</b> is the piece of code applied to message using pattern matching.<br>
<b>record</b> is the tuple that defines a protocol.<br>
<b>client</b> is the true customer of the system who is using service on daily basis.<br>
<b>server</b> is the process nicely scheduled by the system.<br>
<b>feed</b> is the <b>server</b> managed list of records.<br>
<b>table</b> is the <b>ixset</b> or <b>ets</b> based queryable tables.
</p>

<h3>Applications</h3>

<p>
<b>app</b> is the web clients monoidal state machine.<br>
<b>proc</b> is the oriented graph monoidal executional engine.<br>
<b>store</b> is the 2-category key-value database.<br>
</p>

<h3>Core</h3>

<code>

        io : io ⊗ _ ⊗ _
     error : error ⊗ _
        ok : ok ⊗ _
         I : init
         T : term
   element : html | body | h1 | div | br | table | head ...
     field : binary | integer | list | tuple | atom | input | option.
  document : ⊗ task [ field ]
       api : ⊗ I T spawn get push fold
     proto : ⊗<sup>1</sup> event
           | ⊗<sup>7</sup> tx
           | ⊗<sup>3</sup> info
           | ⊗<sup>2</sup> action
</code>

<h3>Types</h3>

<code>

        Λ<sub>Φ</sub> : ∏ Ι Λ<sub>p</sub> Λ<sub>n</sub> Φ
           | Ξ

     event : ⊗<sup>4</sup> τ Ω message ⊗<sup>2</sup> source  target
        tx : ⊗<sup>4</sup> τ Ω payload ⊗<sup>2</sup> account account

      flow<sup>1</sup> : ⊗<sup>2</sup> task task
  customer<sup>3</sup> : ⊗<sup>4</sup> user      accounts Λ<sub>tx</sub>      api
       app<sup>3</sup> : ⊗<sup>4</sup> proc            cx Λ<sub>event</sub>   api
      feed<sup>3</sup> : ⊗<sup>4</sup>         containers Λ<sub>record</sub>  api
      proc<sup>3</sup> : ⊗<sup>4</sup> tasks ⊗<sup>2</sup> task task Λ<sub>trace</sub>   api

    roster : ⊗<sup>2</sup> Π chat<sub>i</sub> Π chat<sub>i</sub>
    record : ⊗<sup>i</sup> field
     table : ⊗<sup>i</sup> record
     store : ⊗<sup>3</sup> Π feed<sub>i</sub> Π table<sub>i</sub> Π id<sub>i</sub>
 relations : table record
           | [ record ]
           | feed container summary record

</code>

<h3>Protocol Bands</h3>

<table cellspacing=10>
<tr><td>2005</td>
    <td>2013</td>
    <td>2013</td>
    <td>2015</td></tr>
<tr valign=top>
<td>
<code>  BPE = ⊗<sup>1</sup> event _
      | ⊗<sup>1</sup> push _
      | Ξ

</code>
</td>
<td>
<code> N2O = ⊗<sup>2</sup> io _ _
     | ⊗<sup>1</sup> ok _
     | ⊗<sup>1</sup> error _
     | ⊗<sup>1</sup> client _
     | Ξ
</code>
</td>
<td>
<code> KVS = ⊗<sup>0</sup> get
     | ⊗<sup>1</sup> put _
     | ⊗<sup>1</sup> add _
     | ⊗<sup>1</sup> remove _
     | Ξ
</code>
</td>
<td>
<code> MQS = ⊗<sup>2</sup> sub _ _
     | ⊗<sup>1</sup> unsub _
     | ⊗<sup>2</sup> pub _ _
     | ⊗<sup>3</sup> msg _ _ _
     | Ξ
</code>
</td>
</tr></table>

<h2>Application Band Signatures</h2>

<h3>Business Process</h3>

<center><p>Picture 1. BPE Application <b>1</b> Category</p><p>
<img src="img/exe-bpe.svg" width=320>
</center></p>

<h3>Database</h3>

<center><p>Picture 1. KV Application <b>2</b> Category</p><p>
<img src="img/exe-store.svg" width=400>
</center></p>

<h3>Application Server</h3>

<center><p>Picture 1. N2O Application <b>1+1</b> Category</p><p>
<img src="img/exe-n2o.svg" width=500>
</center></p>

<h3>Message Queue</h3>

<center><p>Picture 1. One-to-one and one-to-many channels with coordination tables</p><p>
<img src="img/exe-mq.svg" width=420>
</center></p>

<h3>Roster</h3>

<center><p>Picture 1. Chat Application</p><p>
<img src="img/exe-chat.svg" width=600>
</center></p>

<h3>Distributed Transactions</h3>

<center><p>Picture 1. The example with VNode hashring of 64 on a cluster with 3 nodes</p><p>
<img src="img/exe-xa.svg" width=520>
</center></p>

<h2>Satisfaction Landscape</h2>

<p>Whenever customer is being satisfied this joy is always fall into the following categories:</p>

<ul><li>time: duration, development, latency, run, life</li>
    <li>quality: complexiti, price, simplicity, reliability</li>
    <li>people: deterministic, usability</li>
    <li>resources: money, aux, maintanance, data, cpu</li>
    </ul>
<p></p>

<p>Technical Landscape:</p>

<ul><li>Band <font color=silver>22MB/s</font></li>
    <li>Capacity <font color=silver>30K or 100K of bands</font></li>
    <li>Rates <font color=silver>100M/d — TPS<br>
                                <div style="margin-left:65px;">30K/s — N2O<br>
                                 1K/s — XA </font></div></li>
    <li>Latency <font color=silver>30ms 300ms</font></li>
    </ul>

<p>Target areas:</p>

<ul><li>Telecom and Internet</li>
    <li>Business and Banking industry</li>
    <li>WebSocket and IoT</li></ul>

<h2>Research</h2>

<h3>Object</h3>

<ul><li>Software at all OSI levels.</li>
    </ul>

<h3>Purpose</h3>

<p>Compact, adequate and precise typed executional environment for the OSI stack.
   Compact enought for quick check. Adequate enough to theorethical models.</p>

<h3>Result</h3>

<p>The end result of the project is a complex thing that should in its fullness consist of:</p>

<ul><li>Virtual Machine BEAM or LING</li>
    <li>Exe Language</li>
    <li>Application Domain Languages</li>
    <li>Protocols</li>
    <li>Tools</li>
    <li>Types and Frameworks</li>
    <li>Synrc Sources</li>
    <li>Sample Applications</li>
    <li>Documentation with Full-text Search</li>
    <li>Success Stories</li>
    </ul>
