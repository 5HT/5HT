<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>APP SERVER</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">articles</a>
</div>
<hr>
<div class=app>

<div align=right>FROM: 5HT<br>
                   TO: #N2O<br>
                 DATE: 3 MAR 2015</div>

<h2>N2O Application Server</h2>

<h3>REPL</h3>

<p>After downloading and bootstraping a sample
shipped with N2O you should be able to see colored repl.
This is regular Erlang shell, but it is aware of OTP
applications placed in apps and deps directories,
how to resolve them and perform proper starting.</p>

<p><img src="img/mad.png" width=800></p>

<h3>Single Page Application</h3>

<p>The page is usually contains HTML controls upon which event handlers will binds.
Also you should specify a list of n2o.js modules, like protocols, components,
translations or other modules with up to date client functionality. Here is sample SPA:</p>

<p><img src="img/n2oindex.png" width=800></p>

<p>During each initial route connection, main/0 function followed by event(init) is
being called to render postbacks of active controls. Same
page module could serve SPA and/or DTL pages. N2O_start() boots up a supported
connection and send initial <<"N2O,">> authorization packet to open a protocol stream connection.</p>

<center>Listing 1. Route module</center><br>
<div class=note><pre>
-module(index).
-compile(export_all).
-include_lib("n2o/include/wf.hrl").

main()    -> #dtl { file="index",
                    app=sample,
                    bindings=[{body,body()} ] }.

body()    -> [ #panel{id=history},
               #textbox{id=message},
               #button{id=send,body="Chat",
                       postback=chat,source=[message]} ].

event(init) -> wf:info(?MODULE,"init~n",[]);
event(E)    -> wf:info(?MODULE,"event ~p~n",[E]).
</pre></div></p>

<p>After establishing WebSocket connection you should be
able to see IO answer terminated in JSON encoding, e.g.
<code>{eval:"console.log('ok');",data:''}</code>. Here is
the IO answer generated for 'send' button postback:</p>

<center>Listing 2. Test WebSocket connection</center><br>
<div class=note style="width:700px;"><pre>$ tcpkali -T1s --verbose 3 \
     --first-message "N2O," --ws 127.0.0.1:8000/ws/

Destination: [127.0.0.1]:8000
Data(161): ➧HTTP/1.1 101 Switching Protocols\r\n
  connection: Upgrade\r\n
  Access-Control-Allow-Origin: *\r\n
  upgrade: websocket\r\n
  sec-websocket-accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\r\n
  \r\n⬅︎
Ramped up to 1 connections.
Data(414): ➧\201~\001\232{"eval":"{ var x = qi('send'); 
x && x.addEventListener('click',function (event){{ if 
(validateSources(['message'])) ws.send(enc(tuple(atom(
'pickle'),bin('send'),bin('g2gCaAVkAAJldmQABWluZGV4ZAA
EY2hhdGsABHNlbmRkAAVldmVudGgDYgAABZFiAAVgSmIABt6n'),
[tuple(atom('message'),querySource('message')),tuple(
tuple(utf8_toByteArray('send'), bin('detail')), event.
detail)])));else console.log('Validation Error'); }});
};"}
Total data sent:     166 bytes (166 bytes)
Total data received: 575 bytes (575 bytes)
Bandwidth per channel: 0.006 Mbps, 0.7 kBps
Aggregate bandwidth: 0.005↓, 0.001↑ Mbps
Test duration: 1.00634 s.
</pre></div></p>


<h3>Web Logic</h3>

<div class=message>

<p>Web logic shoud be as much declarative as possible
at the same time the web logic language should be readable by Java, .NET engineers.
Web Logic of Deposits Application is powered by N2O WebSocket Application Server.</p>

<p><img src="img/web1.png" width=800></p>

<div class=note>
<p><b>Note:</b> Operating clean and minimalistic API will allow you engineers
to think on core features of the system, SpawnProc provides most
minimal Business Processing frameworks and libraries.</p></div>

<h3>Autogenerated Forms</h3>

<p>You have total freedom in developing your web form
applications: using low-level nitrogen DSL erlang
records markup; or you may use declarative forms definition,
using nitrogen DSL as target language. There are other
options, like non-HTML control elements with <b>spa</b> protocol
or DTL or other template enginer rendering.</p>

<center>Picture 1. One-Time Password Form</center><br>
<p><img src="img/otp.png"></p>

<center>Listing 3. OTP Form</center><br>
<div class=note style="width:800px;"><pre style="font-size:12pt;">document(Name,Phone) -> #document { name = Name,

    sections = [   #sec { name= [ deposits:translate({?MODULE,message}), 
                          wf:to_list(Phone#phone.number)] } ],
    buttons  = [   #but { name='decline', title=deposits:translate(decline),
                          class=cancel, postback={'CloseOpenedForm', Name} },
                   #but { name='next', title = deposits:translate(proceed),
                         class = [button,sgreen], sources = [otp],
                         postback = {'Spinner', {'OpenForm',Name}} } ],
    fields   = [ #field { name='otp', type=otp, 
                          title= deposits:translate({?MODULE,pass}),
                          labelClass=label, fieldClass=column3} ] }.
</pre></div></p>

<center>Picture 2. Open Application Form</center><br>
<p><img src="img/open.png"></p>


<center>Listing 4. Open Application Form</center><br>
<div class=note style="width:800px;"><pre style="font-size:12pt;">
document(Name,Curr) ->
                #document { name = Name,
    sections = [    #sec  { name= deposits:translate(name) } ],
    buttons  = [    #but {  name='decline', title = deposits:translate(decline),
                            class=cancel, postback={'CloseOpenedForm', Name} },
                    #but {  name='next', title = deposits:translate(proceed),
                            class=[button,sgreen],
                            postback={'Spinner', {'CheckApp',Name}},
                            sources= [depositName,money,getMoneyCard,
                                     getMoneyCash,cardSelectFrom,
                            capitalization,cardSelectTo,
                            partialWithdrawal,codeValue] } ],
    fields   = [   #field { name='duration', type=integer,
                            title= deposits:translate(duration),
                            pos = #deposit_app.duration,
                            format = deposits:translate(durationformat),
                            tooltips = [deposits:translate(tooltip1)] },
                   #field { name='rate', type=integer,
                            title= deposits:translate(rate),
                            pos = #deposit_app.rate,
                            format = deposits:translate(rateformat),
                            postfun = fun(X) -> proplists:get_value(rate,X) end,
                            tooltips = [deposits:translate(tooltip2)]},
                   #field { name=money, type=money, curr= Curr,
                            min=20, max=100000,
                            title= deposits:translate(ammount),
                            pos = #deposit_app.amount,
                            tooltips = [deposits:translate(tooltip3) ]},
                    #field { name='depositName', type=string,
                             length=30,min=0, max=30,
                            title= deposits:translate(title),
                            pos = #deposit_app.name,
                            tooltips = [deposits:translate(tooltip4)] },
                    #field { name='bonusCode', type=combo,
                            title= deposits:translate(bonus),
                            options= [
                               #opt{name='noCode',checked=true,
                                    title = deposits:translate(no)},
                               #opt{name='bonusCode'
                                    ,title = deposits:translate(yes)}],
                             tooltips = [deposits:translate({?MODULE, tooltip5})] },
                    #field { name='codeInput', type=empty },
                    #field { name='charge', type=combo,
                            title= deposits:translate(source),
                            options= [
                                 #opt{name='getMoneyCash',
                                      title = deposits:translate(cash)},
                                 #opt{name='getMoneyCard',checked=true,
                                      title = deposits:translate(card)}],
                            tooltips = [deposits:translate(tooltip7),
                                        deposits:translate(tooltip6)] },
                    #field { name=[cardsFrom,userCardsFrom,cardSelectFrom],
                             type=card,
                            title= deposits:translate(yourcard) },
                    #field  { name='percents', type=combo,
                            title= deposits:translate(action),
                            options= [
                                #opt{name='capitalization',checked=true,
                                     title = deposits:translate(add)},
                                #opt{name='partialWithdrawal',
                                     title = deposits:translate(move)}],
                            tooltips = [deposits:translate({?MODULE, tooltip9}),
                                        deposits:translate(tooltip8)] },
                    #field { name=cardsPercent, type=empty } ] }.


</pre></div></p>

<blockquote>Rendered DOM javascript command, Bytes:</blockquote>
<div class=note style="width:800px;"><pre>
> wf:actions(undefined).
> wf:update("1",open_app:new('DP00_12_uah')).
> size(iolist_to_binary(wf:render(wf:actions()))).
4935
</pre></div></p>

<blockquote>Compressed DSL form in BERT, Bytes:</blockquote>
<div class=note style="width:800px;"><pre>
> size(term_to_binary(open_app:new('DP00_12_uah'),[compressed])).
2347
> size(term_to_binary(open_app:new('DP00_12_uah'))).
56474

</pre></div></p>

<blockquote>Declarative compressed FORM in BERT, Bytes:</blockquote>
<div class=note style="width:800px;"><pre>
> size(term_to_binary(open_app:document(maxim,"uah",y,y,y))).
3961
> size(term_to_binary(open_app:document(maxim,"uah",y,y,y),
                                              [compressed])).
1286
</pre></div></p>

</div>
</div>
</body>
</html>
