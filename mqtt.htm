<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>MQTT</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">articles</a>
</div>
<hr>
<div class=app>
<div class=message>

<div align=right>FROM: 5HT<br>
                   TO: #N2O<br>
                 DATE: 26 APR 2017</div>

<h2>N2O Federation <br>over Telemetry Transport</h2>

<h3>Motivation</h3>

<p>Prepare N2O Protocol Federation to commercial use on top of MQTT protocol.
Minimize and remove all features, duplicated by MQTT pub-sub broker.
Provide EMQ extension that immediately introduces N2O protocol and
application to connected MQTT devices. Create single Erlang eco-system
for Enterprise Protocol Federation and establish solid CORBA/WS-SOAP/XMPP-replacement,
ready for high-speed, low-latency IoT applications.</p>

<h3>Web Framework w/o Web Server?</h3>

<p>Usually, Web Framework uses HTTP or WebSocket endpoints.
But what if we need to connect application on devices with TCP/UDP transports?
One of the protocols addressing this usecase is <a href="http://www.indigoo.com/dox/wsmw/1_Middleware/MQTT.pdf">MQTT</a>
that was designed by Andy Stanford-Clark (IBM) and Arlen Nipper in 1999 for connecting
Oil Pipeline telemetry systems over satellite.
The protocol is designed to work over connectionless unreliable environments,
and provides three level of QoS delivery: at least once, at most once, exactly once.</p>

<p>On the other hand, N2O is a federation of protocols, like XMPP/CORBA/WS.
Although N2O supports several encoders: BERT/XML/JSON/TEXT the extension to
other channels beyond WebSockets would involve creating a new Socket Server.
So we have decided to take MQTT as a transport/session protocol for N2O Federation.</p>

<p>EMQ is open-source MQTT broker implementation by Feng Lee. It's clean,
concise and robust. We developed an EMQ compatible plugin that works entirely
within MQTT sessions just like N2O already does within Cowboy's
ranch sessions. This is main difference from Phoenix's gen_server channels.</p>

<p><center>Picture 1. Protocol Modules<br><br><img src="img/mqtt.svg" width=700></center><br></p>

<h3>N2O Endpoints</h3>

<p>Normal use of N2O as a Web Framework or Web Application Server is through
WebSockets, but for IoT and MQTT applications it could be served through
UDP or SCTP protocols providing application level message delivery consistency.
By using MQTT as transport we extend the supported set of endpoint protocols.</p>

<ul><li>WebSockets+TLS</li>
    <li>HTTP/REST</li>
    <li>TCP+TLS</li>
    <li>UDP</li></ul>

<h3>MQTT Sessions</h3>

<p>N2O is working entirely in the context of <b>ws_client</b> processes of EMQ,
just as it is working on top of ranch processes of cowboy. No additional
<b>gen_server</b> is being introduced.</p>

<p>The only official transparent way with zero abstraction is to use EMQ
hooks mechanism. For N2O we need to implement only two cases <b>client.subscribe</b>
and <b>message.delivered</b>. On client subscribe we deliver all persistent informations
that are ready for the client. On Message delivered we unpack any
N2O BERT protocol message inside MQTT session.</p>

<h3>N2O Protocol Chain</h3>

<p>The single point of entrance is the <b>event(init)</b> message handler.
It can only be reached by calling <b>{init,_}</b> message of NITRO protocol.</p>

<center>Code 1. Emulating "N2O," init handshake</center>
<pre>

  on_client_subscribe(ClientId, Username, TopicTable, _Env) ->
    Name = binary_to_list(iolist_to_binary(ClientId)),
    BinTopic = element(1,hd(TopicTable)),
    put(topic,BinTopic),

    n2o_cx:context(#cx{module=route:select(BinTopic),
                       formatter=bert,params=[]}),

    case n2o_proto:info({init,<<>>},[],?CTX) of
         {reply, {binary, M}, _, #cx{}} ->
             self() ! {deliver, emqttd_message:make(Name, 0, Name, M)};
                                      _ -> skip end,

    {ok, TopicTable}.

</pre>

<p>However N2O MQTT is a protocol federation so we need to handle not only N2O messages,
but also KVS, ROSTER, BPE, REST protocols. Thus after initialization during
<b>client.subscribe</b> we call <b>n2o_proto:info</b> &mdash; the entire N2O
protocol chain recursor inside <b>message.delivered</b> hook. This is the best
place to put the federation relay for N2O modules.</p>

<center>Code 2. Emulating N2O message delivery</center>
<pre>

  on_message_delivered(ClientId, Username,
                     Message = #mqtt_message{topic   = Topic,
                                             payload = Payload}, _Env) ->
    Name = binary_to_list(ClientId),

    case n2o_proto:info(binary_to_term(Payload),[],?CTX) of
         {reply, {binary, M}, R, #cx{}} ->
              case binary_to_term(M) of
                   {io,X,_} -> Msg = emqttd_message:make(Name, 0, Name, M),
                               self() ! {deliver, Msg},
                               {ok, Message};
                          _ -> {ok, Message} end;
                          _ -> {ok, Message} end.

</pre>

<h3>N2O Formatters</h3>

<ul><li>TEXT</li>
    <li>JSON</li>
    <li>XML</li>
    <li>BERT</li>
    <li>MessagePack</li></ul>

<p>All this formatters format messages which go directly to TCP WebSocket.
However there are some endpoints which are not TCP sockets, even non-sockets,
like gen_server endpoint, HTTP REST endpoint, which is non-WebSocket endpoint,
and there is a room for other endpoint types. Here is a list of types of
endpoints which are supported by EMQ and accesible to N2O apps:
WebSockets, MQTT, MQTT-SN, TCP, UDP, CoAP.
</p>

<h3>Sample Application</h3>

<center>Code 3. Sample Web Application written in NITRO DSL</center>
<pre>

  main() -> [].

  event(init) ->
      wf:update(loginButton,
        #button{id=loginButton,body="Login",
                postback=login,source=[user,pass]});

  event(login) ->
      wf:redirect("index.htm?room="++wf:to_list(wf:q(pass)));

</pre>

<p><center>Picture 1.1. N2O Review Application.<br><br>
<pre><img src="img/n2o-mqtt.png" width=850></pre>
</center></p>

<h3>MQTT JavaScript companion library</h3>

<center>Code 4. mq.js</center>
<pre>

  var topic = module + "_" + params.room || "lobby",
      mqtt = new Paho.MQTT.Client("127.0.0.1", 8083, ''),
      subscribeOptions = {
         qos: 0,
         onSuccess: function ()  {
            console.log("N2O Subscribed"); },
         onFailure: function (m) {
            console.log("SUB Failure: " +
            message.errorMessage); },
         timeout: 3 },
      options = {
         timeout: 3,
         onFailure: function (m) {
            console.log("SND Failure: " +
            m.errorMessage); },
         onSuccess: function ()  {
            console.log("N2O Connected");
            mqtt.subscribe(topic, subscribeOptions); } },
      ws = {
         send: function (payload) {
               var message = new Paho.MQTT.Message(payload);
               message.destinationName = topic;
               message.qos = 0;
               mqtt.send(message); } };

  function MQTT_start() {
     mqtt.onConnectionLost = function (o) { };
     mqtt.onMessageArrived = function (m) {
         var BERT = m.payloadBytes.buffer.slice(
                    m.payloadBytes.byteOffset,
                    m.payloadBytes.byteOffset +
                    m.payloadBytes.length);
         try { erlang = dec(BERT);
            console.log(utf8_dec(erlang.v[1].v));
            for (var i=0;i<$bert.protos.length;i++) {
               p = $bert.protos[i];
               if (p.on(erlang, p.do).status == "ok") return; }
         } catch (e) { console.log(e); } };
     mqtt.connect(options);
  }

  MQTT_start();

</pre>

<h3>EMQ Plugin</h3>

<p>The N2O over MQTT bridge is a drop-in plugin for EMQ broker.
After starting the server you should enable N2O over MQTT bridge EMQ
plugin on plugin page <a href="http://127.0.0.1:18083/#/plugins">http://127.0.0.1:18083/#/plugins</a> and then
open application sample <a href="http://127.0.0.1:8000/spa/login.htm">http://127.0.0.1:8000/spa/login.htm</a>.</p>

<p><center>Picture 2. EMQ Plugin<br><br><img src="img/emq.png" width=500></center><br></p>

<h3>Things replaced in N2O with MQTT features</h3>

<p>N2O_start and n2o.js are no longer used in MQTT version of N2O.
Instead N2O_start should use MQTT_start and mqtt.js for session
control replacement. We traded HEART protocol and session facilities
for built-in MQTT features. N2O authentication and authorization mechanisms
are also abandoned as MQTT could provide AUTH features too. Obviously
wf:reg and wf:send API are also abandoned as we can use emqttd API
directly and {deliver,_} protocol of ws_client gen_server.</p>

<p>
<ul><li>n2o_session &mdash; no Browser, so no Cookies are needed</li>
    <li>n2o_stream &mdash; no XHR fallback needed</li>
    <li>n2o_heart &mdash; no PING protocol needed</li>
    <li>n2o_mq &mdash; syn and gproc are no longer needed</li>
    <li>n2o_query &mdash; no Query Router</li>
    <li>N2O_start &mdash; replaced by MQTT_start</li>
    <li>ranch &mdash; replaced with esockd</li>
    <li>cowboy &mdash; replaced with mochiweb for WebSocket endpoint</li></ul>
</p>

<h3>NEO: reduced N2O for using over MQTT</h3>

<p>NEO is what you get when you reduce everything duplicating MQTT features.
On the other hand, NEO is completely N2O-compatible embeddable protocol relay.</p>

<p>
<ul><li>neo &mdash; NEO Server Erlang/OTP App for N2O Protocol</li>
    <li>neo_async &mdash; NEO Async Processes: gen_server</li>
    <li>neo_conv  &mdash; NEO Formatter: JSON, BERT</li>
    <li>neo_ftp &mdash; NEO File Protocol: FTP</li>
    <li>neo_nitro &mdash; NEO Nitro Protocol: PICKLE, FLUSH, DIRECT, IO, INIT</li>
    <li>neo_proto &mdash; NEO N2O Federation: NITRO, FTP</li>
    <li>neo_secret &mdash; NEO Security: HMAC AES/CBC-128</li></ul>
</p>


<h3>EMQ &mdash; Lightweight Broker as Service Container for N2O Apps</h3>

<p>EMQ is the latest software that has robust iOS and Android MQTT
client libraries, just have a look at <a href="https://github.com/emqtt">https://github.com/emqtt</a>
Github organization.</p>

<p><center>Picture 3. MQTT 3.1.1 vs MQTT 5.0<br><br><img src="img/mqtt-v5.svg" width=700></center><br></p>

<p>We made compatible EMQ plugin and N2O Review sample application built-in
with EMQ with minimal dependencies. Our fork is based on latest EMQ master
and dedicated for building with our MAD build tool.</p>

<center>Code 5. Setup MQTT flavoured N2O.</center>
<code>
$ brew install erlang
$ curl -fsSL https://raw.github.com/synrc/mad/master/mad > mad \
              && chmod +x mad \
              && sudo cp /usr/local/bin
$ git clone git://github.com/voxoz/mq && cd mq
$ time mad dep com
Writing /apps/review/ebin/review.app
OK

real    1m45.357s
user    0m17.166s
sys     0m5.065s
$ mad rep
Configuration: [{n2o,
                    [{port,8000},
                     {app,review},
                     {mode,dev},
                     {route,routes},
                     {formatter,bert},
                     {minify,
                         {"apps/review/priv/static",
                          ["deps/n2o/priv/bullet.js","deps/n2o/priv/n2o.js",
                           "apps/review/priv/mq.js","deps/n2o/priv/ftp.js",
                           "deps/n2o/priv/protocols/bert.js",
                           "deps/n2o/priv/protocols/nitrogen.js",
                           "deps/n2o/priv/utf8.js",
                           "deps/n2o/priv/validation.js"]}},
                     {log_modules,config},
                     {log_level,config},
                     {log_backend,n2o_log},
                     {origin,<<"*">>},
                     {auto_session,disabled},
                     {pickler,n2o_pickle},
                     {erroring,n2o_error},
                     {event,pickle}]},
                {emq_dashboard,
                    [{listeners_dash,
                         [{http,18083,[{acceptors,4},{max_clients,512}]}]}]},
                {emq_modules,
                    [{modules,
                         [{emq_mod_presence,[{qos,1}]},
                          {emq_mod_subscription,[{<<"%u/%c/#">>,2}]},
                          {emq_mod_rewrite,
                              [{rewrite,"x/#","^x/y/(.+)$","z/y/$1"},
                               {rewrite,"y/+/z/#","^y/(.+)/z/(.+)$",
                                   "y/z/$2"}]}]}]},
                {emqttd,
                    [{listeners,
                         [{http,8083,[{acceptors,4},{max_clients,512}]},
                          {tcp,1883,[{acceptors,4},{max_clients,512}]}]},
                     {sysmon,
                         [{long_gc,false},
                          {long_schedule,240},
                          {large_heap,8000000},
                          {busy_port,false},
                          {busy_dist_port,true}]},
                     {session,
                         [{upgrade_qos,off},
                          {max_inflight,32},
                          {retry_interval,20},
                          {max_awaiting_rel,100},
                          {await_rel_timeout,20},
                          {enable_stats,off}]},
                     {queue,[]},
                     {allow_anonymous,true},
                     {protocol,
                         [{max_clientid_len,1024},{max_packet_size,64000}]},
                     {acl_file,"etc/acl.conf"},
                     {plugins_etc_dir,"etc/plugins/"},
                     {plugins_loaded_file,"etc/loaded_plugins"},
                     {pubsub,
                         [{pool_size,8},{by_clientid,true},{async,true}]}]},
                {kvs,
                    [{dba,store_mnesia},
                     {schema,[kvs_user,kvs_acl,kvs_feed,kvs_subscription]}]}]
Applications:  [kernel,stdlib,gproc,lager_syslog,pbkdf2,asn1,fs,ranch,mnesia,
                compiler,inets,crypto,syntax_tools,xmerl,gen_logger,esockd,
                kvs,cowlib,goldrush,public_key,lager,ssl,cowboy,mochiweb,n2o,
                emqttd,review,active,erlydtl,mad,emqttc,nitro,rest,sh,syslog]
Erlang/OTP 19 [erts-8.3] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Eshell V8.3  (abort with ^G)
1> 18:23:08.249 [info] Application lager started on node nonode@nohost
18:23:08.359 [info] Application ssl started on node nonode@nohost
18:23:08.409 [info] Application cowboy started on node nonode@nohost
18:23:08.415 [info] Application mochiweb started on node nonode@nohost
18:23:08.506 [info] Application n2o started on node nonode@nohost
starting emqttd on node 'nonode@nohost'
Nonexistent: []
emqttd ctl is starting...[ok]
emqttd hook is starting...[ok]
emqttd router is starting...[ok]
emqttd pubsub is starting...[ok]
emqttd stats is starting...[ok]
emqttd metrics is starting...[ok]
emqttd pooler is starting...[ok]
emqttd trace is starting...[ok]
emqttd client manager is starting...[ok]
emqttd session manager is starting...[ok]
emqttd session supervisor is starting...[ok]
emqttd wsclient supervisor is starting...[ok]
emqttd broker is starting...[ok]
emqttd alarm is starting...[ok]
emqttd mod supervisor is starting...[ok]
emqttd bridge supervisor is starting...[ok]
emqttd access control is starting...[ok]
emqttd system monitor is starting...[ok]
Plugins: [{mqtt_plugin,emq_auth_username,"2.1.1",
                       "Authentication with Username/Password",false},
          {mqtt_plugin,emq_dashboard,"2.1.1","EMQ Web Dashboard",false},
          {mqtt_plugin,emq_modules,"2.1.1","EMQ Modules",false},
          {mqtt_plugin,emq_persistence,"1.1.2","N2O over MQTT Bridge",false}]
Names: [emq_dashboard,emq_persistence]
dashboard:http listen on 0.0.0.0:18083 with 4 acceptors.
18:23:11.715 [info] started Apps: [emq_dashboard]
18:23:11.715 [info] load plugin emq_dashboard successfully
18:23:11.715 [info] Application emq_dashboard started on node nonode@nohost
18:23:11.775 [info] started Apps: [emq_persistence]
18:23:11.775 [info] load plugin emq_persistence successfully
18:23:11.775 [info] Application emq_persistence started on node nonode@nohost
mqtt:ws listen on 0.0.0.0:8083 with 4 acceptors.
mqtt:tcp listen on 0.0.0.0:1883 with 4 acceptors.
emqttd 2.1.1 is running now
</code>

<p><center>Picture 4. N2O Loop under emqttd_ws_client_sup.<br><br>
<img src="img/observer-mqtt.png"></center><br></p>

<h3>Credits</h3>

<p><ul><li>Maxim Sokhatsky</li>
       <li>Andy Martemyanov</li>
       <li>Feng Lee &mdash; author of EMQ</li></ul></p>

<h3>Sources</h3>

<p><ul><li><a href="https://github.com/voxoz/mq">https://github.com/voxoz/mq</a> &mdash; Sample, EMQ, EMQ-N2O, EMQ dashboard</li>
       <li><a href="https://github.com/synrc/neo">https://github.com/synrc/neo</a> &mdash; Reduced version of N2O for EMQ usage</li>
       <li>If you've found any errors, please <a href="https://github.com/5HT/5ht.co/blob/master/mqtt.htm">edit this page</a>!</li></ul></p>

<div align=right style="padding-top:33px;"><p>Made with ♡  for EMQ and N2O</p></div>

</div>

</div>
</div>


</body>
</html>
